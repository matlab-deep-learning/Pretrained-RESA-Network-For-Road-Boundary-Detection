function coordinates = generateLines(pred, conf, imsize, params, fitPolyLine)
% The generateLines function extracts the road boundary coordinates from the
% predicted probability map.

% Copyright 2022 The MathWorks, Inc.

% Number of boundaries to detect.
numBoundaries = size(conf,1);

% Filter size for gaussian blur.
gaussFilterSize = [9,9];

% Batch size of input.
batchSize = size(pred,4);

% Create cell array to store the boundary coordinates.
coordinates = cell(batchSize,numBoundaries);

% Threshold value below which the detections are ignored.
threshold = params.threshold;

% Suppress warnings generated by fitPolynomialRANSAC.
warning('off','vision:ransac:maxTrialsReached');

% For each image 
for batch = 1:batchSize
    for bdry = 1:numBoundaries
        probMap = pred(:,:,bdry+1,batch);
        % Smoothen the probability maps.
        probMap = imgaussfilt(probMap,'FilterSize',gaussFilterSize,'Padding','replicate');
        if conf(bdry,batch)>0
            % Extract the boundary points from probability maps.
            coordXY = boundaryPoints(probMap, threshold, imsize, params.cutH);
            % Remove all zeros.
            mask = (coordXY(:,1) == 0) & (coordXY(:,2) == 0);
            coordXY(mask,:) = [];
            if ~isempty(coordXY)
                % Sample points after specified gap including the last
                % point.
                last = coordXY(end,:);
                coordXY = coordXY(1:1:end,:);
                if ~all(coordXY(end,:) == last)
                    coordXY(end+1,:) = last;
                end
                if ~fitPolyLine
                    coordinates{batch,bdry} = coordXY(:,1:2);
                else
                    % Fit the equation x = a.y^2 + b.y + c.
                    y = [coordXY(1,2):-1:coordXY(end,2)]';
                    % Second-degree polynomial.
                    n = 2;           
                    % Maximum allowed distance for a point to be inlier.
                    maxDistance = 3; 
                    p = fitPolynomialRANSAC([coordXY(:,2),coordXY(:,1)],n,maxDistance);
                    x = round(polyval(p,y));
                    coordXY = [x,y];
                    ids = x>=1 & x<=imsize(2);
                    coordXY = coordXY(ids,:);
                    coordinates{batch,bdry} = coordXY;
                end
            end
        end
    end
end
end

function coordinates = boundaryPoints(probMap, thresh, imsize, cutH)
% The function boundaryPoints returns the row and column indexes of the maximum
% probability values.
probshape = size(probMap);
coordinates = zeros(probshape(1),2);
for i=1:probshape(1)
    % Extract the indexes of the max value.
    rowID = probshape(1)-i+1;
    cols = probMap(rowID,:);
    [value, id] = max(cols);
    if value > thresh
        coordinates(i,1) = floor(id/probshape(2)*imsize(2));
        coordinates(i,2) = floor(rowID/probshape(1)*(imsize(1)-cutH+1))+cutH-1;
    end
end
% Ignore if number of points are less than 2.
if sum(coordinates>0)<2
    coordinates = zeros(probshape(1),2);
end
end
